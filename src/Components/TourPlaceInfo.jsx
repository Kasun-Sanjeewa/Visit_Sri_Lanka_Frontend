import React, { useState } from "react";
import "./TourPlaceInfo.css";

export function TouristInfo() {
  const [searchTerm, setSearchTerm] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [placeDetails, setPlaceDetails] = useState(null);

  const API_KEY = "AIzaSyCb_Z2N2vEP1FgkuI9p5HUW3OI3RUR2CiE";
  const BASE_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      setIsLoading(true);
      setError(null);
      setPlaceDetails(null);
      try {
        const details = await fetchPlaceDetails(searchTerm);
        if (details) {
          setPlaceDetails(details);
        } else {
          setError("No details found for the entered place.");
        }
      } catch (err) {
        setError(
          "Failed to fetch place details. Please try again. " + err.message
        );
      } finally {
        setIsLoading(false);
      }
    }
  };

  const fetchPlaceDetails = async (location) => {
    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: `Provide detailed information about the place '${location}'. Include the following details if available: Location, historical significance, UNESCO status, structural details, gardens, and notable features. Return JSON format only with a single object containing these fields: location, meaning, historicalEra, unescoStatus, structure, gardens, features.`,
            },
          ],
        },
      ],
    };

    const response = await fetch(BASE_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });
    if (!response.ok) {
      throw new Error("Failed to fetch data from API");
    }

    const data = await response.json();
    const generatedContent =
      data?.candidates?.[0]?.content?.parts?.[0]?.text || null;

    if (!generatedContent) {
      throw new Error("No content generated by the API");
    }

    try {
      const jsonStartIndex = generatedContent.indexOf("{");
      const jsonEndIndex = generatedContent.lastIndexOf("}") + 1;
      const jsonString = generatedContent.slice(jsonStartIndex, jsonEndIndex);

      const parsedData = JSON.parse(jsonString);
      return parsedData;
    } catch (jsonParseError) {
      throw new Error("Failed to parse generated JSON content");
    }
  };

  return (
    <div className="Tour-Hero-page">
      <div className="tourist-info">
        {/* Search Section */}
        <div className="search-container">
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              placeholder="Type the place name for more information"
              className="search-input"
              disabled={isLoading}
            />
            <button
              type="submit"
              className="search-button"
              disabled={isLoading}
            >
              {isLoading ? "Searching..." : "Find More"}
            </button>
          </form>
          {error && <div className="error-message">{error}</div>}
        </div>

        {/* Loading Animation */}
        {isLoading && (
          <div className="loading-spinner">
            <div className="spinner"></div>
          </div>
        )}

        {/* Place Details Section */}
        {placeDetails && (
          <div className="place-details">
            <ul className="details-list">
              <li>
                <strong>Location:</strong> {placeDetails.location}
              </li>
              {placeDetails.meaning && (
                <li>
                  <strong>Meaning:</strong> {placeDetails.meaning}
                </li>
              )}
              {placeDetails.historicalEra && (
                <li>
                  <strong>Historical Era:</strong> {placeDetails.historicalEra}
                </li>
              )}
              {placeDetails.unescoStatus && (
                <li>
                  <strong>UNESCO Status:</strong> {placeDetails.unescoStatus}
                </li>
              )}
              {placeDetails.structure &&
                typeof placeDetails.structure === "object" && (
                  <li>
                    <strong>Structure:</strong>
                    <ul>
                      {Object.entries(placeDetails.structure).map(
                        ([key, value], index) => (
                          <li key={index}>
                            <strong>{key}</strong> {value}
                          </li>
                        )
                      )}
                    </ul>
                  </li>
                )}
              {placeDetails.gardens &&
                typeof placeDetails.gardens === "object" && (
                  <li>
                    <strong>Gardens:</strong>
                    <ul>
                      {Object.entries(placeDetails.gardens).map(
                        ([key, value], index) => (
                          <li key={index}>
                            <strong>{key}</strong> {value}
                          </li>
                        )
                      )}
                    </ul>
                  </li>
                )}
              {Array.isArray(placeDetails.features) &&
                placeDetails.features.length > 0 && (
                  <li>
                    <strong>Features:</strong>
                    <ul>
                      {placeDetails.features.map((feature, index) => (
                        <li key={index}>{feature}</li>
                      ))}
                    </ul>
                  </li>
                )}
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}
